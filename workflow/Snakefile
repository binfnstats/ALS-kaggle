# workdir: ".."

configfile: "configs/config.yaml"


chroms = [
    'chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7',
    'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14',
    'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX'
]


rule all:
    input:
        config['output'] + '/all.done'
    shell:
        """
        rm {input}
        """


rule mmsplice:
    input:
        vcf = config['vcf'],
        fasta = config['fasta'],
    resources:
        mem_mb = 32000,
        threads = 4
    output:
        result = config['mmsplice']['results'],
    script:
        "scripts/mmsplice.py"


rule merge_gene_counts:
    input:
        count_dir = config['transcriptomics']['gene_count_dir'],
        samples = config['metadata']['participants']
    output:
        counts = config['output'] + '/counts/gene_counts.tsv'
    script:
        "scripts/merge_gene_counts.py"


rule umap:
    input:
        counts = rules.merge_gene_counts.output.counts
    output:
        plot = config['output'] + '/umap/plot.png'
    threads: 60
    script:
        "scripts/umap.py"


rule filter_counts:
    input:
        gtf = config['gtf'],
        counts = rules.merge_gene_counts.output.counts
    output:
        ods = config['output'] + '/counts/ods_filtered.RDS',
        filtered_plot = config['output'] + '/counts/filtered.png'
    params:
        fpkm_cutoff = config['outrider']['fpkm_cutoff'],
        ensembl_release = config['genome']['ensembl_release']
    script:
        "scripts/filter_counts.R"


rule outrider:
    input:
        ods = rules.filter_counts.output.ods
    output:
        ods = config['output'] + '/outrider/ods.RDS',
        results = config['outrider']['results']
    params:
        padj_cutoff = config['outrider']['padj_cutoff']
    threads: 60
    script:
        "scripts/outrider.R"


rule outrider_plots:
    input:
        ods_raw = rules.filter_counts.output.ods,
        ods = rules.outrider.output.ods
    output:
        dim_search = config['output'] + '/outrider/dim_search.png',
        power = config['output'] + '/outrider/power_analysis.png',
        disp_est = config['output'] + '/outrider/disp_est.png',
        per_sample = config['output'] + '/outrider/aberrant_per_sample.png',
        expr_genes = config['output'] + '/outrider/expr_genes.png',
        pvalues = config['output'] + '/outrider/pvalues.png',
        heatmap_raw = config['output'] + '/outrider/heatmap_raw.png',
        heatmap_fit = config['output'] + '/outrider/heatmap_fit.png',
        exp_obs_counts = config['output'] + '/outrider/exp_obs_counts.png'
    script:
        "scripts/outrider_plots.R"


rule network_analysis:
    input:
        outliers = rules.outrider.output.results,
        gene_seed_prob = config['ppi']['gene_seed_prob']
    output:
        histogram = config['output'] + '/network_analysis/histogram.png',
        outliers = config['output'] + '/network_analysis/expr_outliers.tsv',
        gene_seed_prob_sub = config['output'] + \
            '/network_analysis/gene_seed_prob_sub.tsv'
    script:
        "scripts/network_analysis.R"


rule outliers_genes:
    input:
        gtf = config['gtf'],
        results = config['outrider']['results']
    output:
        genes = config['genes_gtf']
    script:
        "scripts/genes_gtf.py"


rule literature:
    output:
        nature_review = config['literature']['nature_review'],
        wgs = config['literature']['wgs']
    notebook:
        "notebooks/literature.ipynb"


rule compare_literature:
    input:
        nature_review = config['literature']['nature_review'],
        wgs = config['literature']['wgs'],
        genes = config['genes_gtf'],
        results = config['outrider']['results']
    output:
        nature_review = config['output'] + \
            '/literature_overlap_nature_review.txt',
        wgs = config['output'] + '/literature_overlap_wgs.txt'
    notebook:
        "notebooks/compare_literature.ipynb"


rule prioritize_vep_variants:
    input:
        vcf = config['vcf'],
        vep = config['variants']['vep'],
        results = config['outrider']['results'],
        genes = config['genes_gtf'],
        released_files = config['metadata']['released_files']
    output:
        prioritized = config['variants']['prioritized_chrom']
    notebook:
        "notebooks/prioritized_variants.ipynb"


rule merge_variants:
    input:
        prioritized = expand(
            config['variants']['prioritized_chrom'], chrom=chroms)
    output:
        prioritized = config['variants']['prioritized']
    run:
        import pandas as pd
        pd.concat([
            pd.read_csv(i)
            for i in input['prioritized']
        ]).to_csv(output['prioritized'], index=False)


# rule variant_outlier:
#     input:
#         prioritized = config['variants']['prioritized'],
#         results = config['outrider']['results'],
#         genes = config['genes_gtf'],
#         nature_review = config['literature']['nature_review'],
#         wgs = config['literature']['wgs'],
#         ppi = config['ppi']['gene_seed_prob'],
#         gtf = config['gtf']
#     output:
#         results_variants = config['variants']['results_prioritized']
#     notebook:
#         "notebooks/outlier_prioritized_variants.ipynb"


rule collect_output:
    input:
        rules.umap.output,
        rules.outrider_plots.output,
        rules.outliers_genes.output,
        rules.compare_literature.output,
        config['outrider']['results'],
        config['variants']['prioritized'],
        rules.network_analysis.output
    output:
        touch(config['output'] + '/all.done')


rule dependency:
    output:
        dag = multiext('images/dag', '.svg', '.png'),
        rulegraph = multiext('images/rulegraph', '.svg', '.png')
    shell:
        """
        snakemake --dag | dot -Tsvg -Grankdir=TB > {output.dag[0]}
        snakemake --dag | dot -Tpng -Grankdir=TB > {output.dag[1]}
        snakemake --rulegraph | dot -Tsvg -Grankdir=TB > {output.rulegraph[0]}
        snakemake --rulegraph | dot -Tpng -Grankdir=TB > {output.rulegraph[1]}
        """
