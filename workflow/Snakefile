import itertools

configfile: "configs/config.yaml"

SNAKEFILE_DIR = os.path.dirname(workflow.snakefile)

chroms = [
    'chr1', 'chr2', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7',
    'chr8', 'chr9', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14',
    'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr20', 'chr21', 'chr22', 'chrX'
]


rule all:
    input:
        config['output'] + '/all.done'
    shell:
        """
        rm {input}
        """

### Preprocessing

rule sample_annotation:
    input:
        participants = config['metadata']['participants'],
        dataportal = config['metadata']['dataportal']
    output:
        merged = config['output'] + '/sample_annotation.tsv'
    script:
        "scripts/sample_annotation.R"


rule merge_gene_counts:
    input:
        count_dir = config['transcriptomics']['gene_count_dir'],
        samples = config['metadata']['participants']
    output:
        counts = config['output'] + '/counts/gene_counts.tsv'
    script:
        "scripts/merge_gene_counts.py"


rule filter_counts:
    input:
        gtf = config['gtf'],
        counts = rules.merge_gene_counts.output.counts
    output:
        ods = config['output'] + '/counts/ods_filtered.RDS',
        filtered_plot = config['output'] + '/counts/filtered.png'
    params:
        fpkm_cutoff = config['outrider']['fpkm_cutoff'],
        ensembl_release = config['genome']['ensembl_release']
    script:
        "scripts/filter_counts.R"


### UMAP

rule umap_raw:
    input:
        counts = rules.merge_gene_counts.output.counts,
        samples = rules.sample_annotation.output.merged
    output:
        plot = config['figures'] + '/umap_raw/{annotation_column}.png'
    threads: 10
    script:
        "scripts/umap.py"


rule umap_sizefactors:
    input:
        ods = rules.filter_counts.output.ods,
        sample_annotation = rules.sample_annotation.output.merged
    output:
        umap12 = config['figures'] + \
            '/umap_sizefactors/{annotation_column}_12.png',
        umap13 = config['figures'] + \
            '/umap_sizefactors/{annotation_column}_13.png',
        umap23 = config['figures'] + \
            '/umap_sizefactors/{annotation_column}_23.png'
    script:
        "scripts/umap_sizefactors.R"


### OUTRIDER

rule outrider_dim_search:
    input:
        ods = rules.filter_counts.output.ods
    output:
        ods = config['output'] + '/outrider/ods_dim_search.RDS',
    threads: 60
    script:
        "scripts/outrider_dim_search.R"


rule outrider:
    input:
        ods = rules.outrider_dim_search.output.ods
    output:
        ods = config['output'] + '/outrider/ods.RDS',
        results = config['outrider']['results']
    params:
        padj_cutoff = config['outrider']['padj_cutoff']
    threads: 60
    script:
        "scripts/outrider.R"


rule outrider_plots:
    input:
        ods = rules.outrider.output.ods
    output:
        qqplot = config['figures'] + '/outrider/qqplot.png',
        dim_search = config['figures'] + '/outrider/dim_search.png',
        power = config['figures'] + '/outrider/power_analysis.png',
        per_sample = config['figures'] + '/outrider/aberrant_per_sample.png',
        expr_genes = config['figures'] + '/outrider/expr_genes.png',
        pvalues = config['figures'] + '/outrider/pvalues.png',
        exp_obs_counts = config['figures'] + '/outrider/exp_obs_counts.png'
    params:
        anno_groups = config['annotation_cols']
    script:
        "scripts/outrider_plots.R"


rule outrider_heatmaps:
    input:
        ods = rules.outrider.output.ods,
        sample_annotation = rules.sample_annotation.output.merged
    output:
        bcv = config['figures'] + '/outrider/bcv.png',
        bcv_dt = config['figures'] + '/outrider/bcv_dt.tsv',
        gene_vs_sample = config['figures'] + '/outrider/gene_vs_sample.png',
        heatmap_raw = config['figures'] + '/outrider/heatmap_raw.png',
        heatmap_fit = config['figures'] + '/outrider/heatmap_fit.png',
    params:
        anno_groups = config['annotation_cols']
    script:
        "scripts/outrider_heatmaps.R"


rule outrider_samples_plot:
    input:
        ods = rules.outrider.output.ods
    output:
        samples_plot = config['figures'] + '/outrider/candidate_samples.png'
    script:
        "scripts/samples_plot.R"        


rule outliers_genes:
    input:
        gtf = config['gtf'],
        results = config['outrider']['results']
    output:
        genes = config['genes_gtf']
    script:
        "scripts/genes_gtf.py"


### Know Genes

rule literature:
    output:
        nature_review = config['literature']['nature_review'],
        wgs = config['literature']['wgs']
    notebook:
        "notebooks/literature.ipynb"


rule parse_ALSoD:
    output:
        genes = config['literature']['alsod']
    script:
        "scripts/parse_alsod.py"


rule compare_literature:
    input:
        nature_review = config['literature']['nature_review'],
        wgs = config['literature']['wgs'],
        genes = config['genes_gtf'],
        results = config['outrider']['results']
    output:
        nature_review = config['output'] + \
            '/literature_overlap_nature_review.txt',
        wgs = config['output'] + '/literature_overlap_wgs.txt'
    notebook:
        "notebooks/compare_literature.ipynb"


### Variant Annotation

rule annotate_variants_with_vep:
    input:
        vcf = config['vcf'],
        gtf = config['gtf'],
        fasta = config['fasta'],
    params:
        human_genome_version = config['vep']['human_genome_version'],
        assembly = config['vep']['assembly'],
        vep_cache = config['vep']['vep_cache'],
        loftee_data_dir = config['vep']['loftee_data_dir'].format(
            ASSEMBLY=config['vep']['assembly'],
            HUMAN_GENOME_VERSION=config['vep']['human_genome_version'],
        ),
        cadd_dir = config['vep']['cadd_dir'].format(
            ASSEMBLY=config['vep']['assembly'],
            HUMAN_GENOME_VERSION=config['vep']['human_genome_version'],
        ),
        gnomad_vcf = config['vep']['gnomad_vcf'].format(
            ASSEMBLY=config['vep']['assembly'],
            HUMAN_GENOME_VERSION=config['vep']['human_genome_version'],
        ),
        vep_annotate_cmd = f"{SNAKEFILE_DIR}/scripts/vep_99_skipheader.sh",
    output:
        vep = directory(config['variants']['vep_pq']),
    notebook:
        "notebooks/RunVEPonALS.ipynb"


rule mmsplice:
    input:
        vcf = config['vcf'],
        fasta = config['fasta'],
    resources:
        mem_mb = 32000,
        threads = 4
    output:
        result = config['mmsplice']['results'],
    script:
        "scripts/mmsplice.py"


rule prioritize_vep_variants:
    input:
        vcf = config['vcf'],
        vep = config['variants']['vep'],
        results = config['outrider']['results'],
        genes = config['genes_gtf'],
        released_files = config['metadata']['released_files'],
        mmsplice = config['mmsplice']['results']
    output:
        prioritized = config['variants']['prioritized_chrom']
    notebook:
        "notebooks/prioritized_variants.ipynb"


rule merge_variants:
    input:
        prioritized = expand(
            config['variants']['prioritized_chrom'], chrom=chroms
        )
    output:
        prioritized = config['variants']['prioritized']
    run:
        import pandas as pd
        pd.concat([
            pd.read_csv(i)
            for i in input['prioritized']
        ]).to_csv(output['prioritized'], index=False)


rule variant_outlier:
    input:
        prioritized = config['variants']['prioritized'],
        results = config['outrider']['results'],
        genes = config['genes_gtf'],
        nature_review = config['literature']['nature_review'],
        wgs = config['literature']['wgs'],
        ppi = config['ppi']['gene_seed_prob'],
        mmsplice = config['mmsplice']['results'],
        alsod = config['literature']['alsod']
    output:
        results_all = config['results_all'],
        results_variants = config['results_prioritized']
    notebook:
        "notebooks/outlier_prioritized_variants.ipynb"


### PPI Network Analysis

rule ppi_download_string:
    output: config['output'] + '/network_analysis/9606.protein.links.detailed.v11.0.txt.gz'
    params:
        url=config['ppi']['string_url']
    shell:
        """
        wget --timestamping {params.url} -O {output}.gz
        """


rule ppi_preprocess_string:
    input:
        db=rules.ppi_download_string.output[0]
    output:
        db=config['output'] + '/network_analysis/string_preprocessed.tsv.gz'
    params:
        release=config['genome']['ensembl_release']
    notebook:
        "notebooks/PreprocessString.ipynb"


rule ppi_random_walk:
    input:
        lit_rev_genes=config['literature']['nature_review_with_ensg'],
        string_db=rules.ppi_preprocess_string.output.db
    output:
        gene_seed_prob=config['ppi']['gene_seed_prob']
    notebook:
        "notebooks/RunRandomWalkWithRestarts.ipynb"


rule ppi_subset:
    input:
        outliers = rules.outrider.output.results,
        gene_seed_prob = rules.ppi_random_walk.output.gene_seed_prob
    output:
        histogram = config['output'] + '/network_analysis/histogram.png',
        outliers = config['output'] + '/network_analysis/expr_outliers.tsv',
        gene_seed_prob_sub = config['output'] + \
            '/network_analysis/gene_seed_prob_sub.tsv'
    script:
        "scripts/network_analysis.R"


### Collect Outputs

rule umap:
    input:
        expand(rules.umap_raw.output,
               annotation_column=config['annotation_cols']),
        expand(rules.umap_sizefactors.output,
               annotation_column=config['annotation_cols'])


rule plots:
    input:
        rules.umap.input,
        rules.outrider_plots.output,
        rules.outrider_heatmaps.output


def get_output(wildcards):
    out_objs = [
        rules.outliers_genes.output,
        rules.compare_literature.output,
        config['outrider']['results'],
        config['results_prioritized'],
        rules.ppi_random_walk.output,
        rules.ppi_subset.output
    ]
    
    if config['plots'] is True:
        out_objs.extend(rules.plots.input)
    
    out_objs = [[x] if isinstance(x, str) else list(x) for x in out_objs]
    return list(itertools.chain(*out_objs))


rule collect_output:
    input: get_output
    output:
        touch(config['output'] + '/all.done')


### Dependency Graphs

rule dependency:
    output:
        dag = [
            config['figures'] + '/dependency/dag.png',
            config['figures'] + '/dependency/dag_plots.png'
        ],
        rulegraph = [
            config['figures'] + '/dependency/rulegraph.png',
            config['figures'] + '/dependency/rulegraph_plots.png'
        ]
    shell:
        """
        snakemake --config plots=False --dag | dot -Tpng -Grankdir=TB > {output.dag[0]}
        snakemake --config plots=True --dag | dot -Tpng -Grankdir=TB > {output.dag[1]}
        snakemake --config plots=False --rulegraph | dot -Tpng -Grankdir=TB > {output.rulegraph[0]}
        snakemake --config plots=True --rulegraph | dot -Tpng -Grankdir=TB > {output.rulegraph[1]}
        """
